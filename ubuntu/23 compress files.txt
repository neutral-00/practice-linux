

## compress
- common commads and usages
- gzip : The most frequently used Linux compression utility
- bzip2 : Produces files significantly smaller than those produced by gzip
- xz : The most space-efficient compression utility used in Linux
- zip : Is often required to examine and decompress archives from other operating systems

- generally, the more efficient techniques take longer
- Decompression time does not vary as much across different methods.
- In addition, the tar utility is often used to group files in an archive and then compress the whole archive at once.


## gzip usage
- It compresses well and is very fast.
gzip * : Compresses all files in the current directory; each file is compressed and renamed with a .gz extension.
zip -r projectX : Compresses all files in the projectX directory, along with all files in all of the directories under projectX.
gunzip foo : De-compresses foo found in the file foo.gz. Under the hood, the gunzip command is actually the same as gzip â€“d.


## bzip2 usage
- bzip2 * : Compresses all of the files in the current directory and replaces each file with a file renamed with a .bz2 extension
- bunzip2 *.bz2 : Decompresses all of the files with an extension of .bz2 in the current directory. Under the hood, bunzip2 is the same as calling bzip2 -d.
- NOTE: bzip2 has lately become deprecated due to lack of maintenance and the superior compression ratios of xz which is actively maintained.


## xz usage
- xz is the most space-efficient compression utility frequently used in Linux
- is the choice for distributing and storing archives of the Linux kernel.
- it trades a slower compression speed for an even higher compression ratio
xz * : Compresses all of the files in the current directory and replaces each file with one with a .xz extension
xz foo : Compresses foo into foo.xz using the default compression level (-6), and removes foo if compression succeeds.
xz -dk bar.xz : Decompresses bar.xz into bar and does not remove bar.xz even if decompression is successful.
xz -dcf a.txt b.txt.xz > abcd.txt : Decompresses a mix of compressed and uncompressed files to standard output, using a single command.
xz -d *.xz : Decompresses the files compressed using xz.


## zip usage
- is rarely used to compress files in Linux
- It is only used in Linux when you get a zipped file from a Windows user
- It is neither fast nor efficient
zip backup * : Compresses all files in the current directory and places them in the backup.zip.
zip -r backup.zip ~ : Archives your login directory (~) and all files and directories under it in backup.zip.
unzip backup.zip : Extracts all files in backup.zip and places them in the current directory.


## tar usage
- tar stood for "tape archive" and was used to archive files to a magnetic tape. 
- It allows you to create or extract files from an archive file, often called a tarball. 
tar xvf mydir.tar : Extract all the files in mydir.tar into the mydir directory.
tar zcvf mydir.tar.gz mydir : Create the archive and compress with gzip.
tar jcvf mydir.tar.bz2 mydir : Create the archive and compress with bz2.
tar Jcvf mydir.tar.xz mydir : Create the archive and compress with xz.
tar xvf mydir.tar.gz : Extract all the files in mydir.tar.gz into the mydir directory
- You do not have to tell tar it is in gzip format.

## Disk-to-Disk Copying (dd)
- The dd program is very useful for making copies of raw disk space
- For example, to back up your Master Boot Record (MBR)
- the first 512-byte sector on the disk that contains a table describing the partitions on that disk
- you might type: dd if=/dev/sda of=sda.mbr bs=512 count=1
- warning: everything that previously existed on the second disk will be deleted
- to make an exact copy of the first disk device to the second disk device type:
dd if=/dev/sda of=/dev/sdb
- warning: Do not experiment with this command as written above, as it can erase a hard disk!


## Backup ur home directory
- First, using tar, backup all files and subdirectories under your home directory. 
- Place the resulting tarball file in the /tmp directory, giving it the name backup.tar.
student:/tmp> tar -cvf /tmp/backup.tar ~
or
student:/tmp> tar -cvf /tmp/backup.tar /home/student

- Second, accomplish the same task with gzip compression using the -z option to tar, creating /tmp/backup.tar.gz.
- Compare the size of the two files (with ls -l)
student:/tmp> tar zcf /tmp/backup.tar.gz ~



- For additional experience, make backups using the -j option using the bzip2 compression, 
- and -J option for using the xz compression
student:/tmp> tar jcf /tmp/backup.tar.bz2 ~
student:/tmp> tar Jcf /tmp/backup.tar.xz ~

- using the -h option to ls to make it human-readable
student@ubuntu:~student:/tmp> ls -lh /tmp/backup*
