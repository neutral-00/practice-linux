

## Learning objective
- understand the powers and dangers of root
- set and change password
- secure the boot process and hardware resources


## user accounts
- Upon account creation, new user information is added to the user database and 
- the user's home directory must be created and populated with some essential files
- useradd and userdel as well as GUI tools are used for creating and removing accounts. 
- For each user, the following seven fields are maintained in the /etc/passwd file: 
1. Username:		
	- User login name
	- Should be between 1 and 32 characters long
2. Password:
	- User password (or the character x if the password is stored in the /etc/shadow file) in encrypted format
3. User ID (UID):
	- Every user must have a user id (UID):UID 0 is reserved for root user.
	- range from -99 are reserved for other predefined accounts
	- range from 100-999 are reserved for system accounts and groups
	- Normal users have UID's of 1000 or greater
4. Group ID (GID):
	- The primary Group ID (GID); Group Identification Number stored in the /etc/group file
5. User Info:
	- This field is optional and allows insertion of extra information about the user such as their name
6. Home Directory:
	- The absolute path location of user's home directory
7. Shell:
	- The absolute location of a user's default shell
	
## Types of Accounts
- Linux has four types of accounts:
	-root
	-System
	-Normal
	-Network
- it is advised to grant the minimum privileges possible and necessary to accounts, and remove inactive accounts. 
- identify potentially inactive accounts using the last utility

## root
- is the most privileged account on a Linux/UNIX system
- has the ability to carry out all facets of system administration
	- adding accounts
	- changing user passwords
	- examining log files
	- installing software, etcCreating, removing and managin
- Utmost care must be taken when using this account
- It has no security restrictions imposed upon it.
- When you are signed in as, or acting as root, the shell prompt displays '#'

### when root privillege is required
- Creating, removing and managing user accounts
- Managing software packages
- Removing or modifying system files
- Restarting system services.

## Operations Not Requiring root Privileges
- A regular account user can perform some operations requiring special permissions; 
- however, the system configuration must allow such abilities to be exercised.
- SUID (Set owner User ID upon execution)
- Use of SUID provides temporary permissions to a user to run a program with the permissions of the file owner
- Running a network client | Sharing a file over the network
- Using devices such as printers | Printing over the network
- Operations on files that the user has proper permissions 
- Running SUID-root applications | Executing programs such as passwd

## sudo vs su
- In Linux you can use either su or sudo to temporarily grant root access to a normal user.
- diff1
	- su: When elevating privilege, you need to enter the root password.
	- sudo: When elevating privilege, you need to enter the userâ€™s password and not the root password.
- diff2
	- su: Once a user elevates to the root account using su, the user can do anything that the root user can do
	- sudo: what the user is allowed to do can be precisely controlled and limited
- diff3
	- su: The command has limited logging features.
	- sudo: The command has detailed logging features.

## sudo features
- has the ability to keep track of unsuccessful attempts at gaining root access.
- Users' authorization for using sudo is based on configuration information stored in
	- the /etc/sudoers file and
	- the /etc/sudoers.d directory
- below similar msg might appear in /var/log/secure for failed sudo
badperson : user NOT in sudoers ; TTY=pts/4 ;


## The sudoers File
- Whenever sudo is invoked, a trigger will look at /etc/sudoers and the files in /etc/sudoers.d 
- to determine if the user has the right to use sudo and what the scope of their privilege is
- The basic structure of entries in these files is:
who where = (as_whom) what
- /etc/sudoers contains a lot of documentation in it about how to customize. 
- Most Linux distributions now prefer you add a file in the directory /etc/sudoers.d with a name the same as the user.
- This file contains the individual user's sudo configuration
- and one should leave the main configuration file untouched except for changes that affect all users.
- You should edit any of these configuration files by using visudo,
- which ensures that only one person is editing the file at a time,
- has the proper permissions, and refuses to write out the file and exit if there are syntax errors in the changes made. 
- The editing can be accomplished by doing a command such as the following ones
# visudo /etc/sudoers
# visudo -f /etc/sudoers.d/student


## Command Logging
- By default, sudo commands and any failures are logged in /var/log/auth.log under the Debian distribution family
- and in /var/log/messages and/or /var/log/secure on other systems.
- This is an important safeguard to allow for tracking and accountability of sudo use.
- A typical entry of the message contains:
	-Calling username
	-Terminal info
	-Working directory
	-User account invoked
	-Command with arguments


## Process Isolation
- Linux is considered to be more secure than many other operating systems because 
	- processes are naturally isolated from each other
	- One process normally cannot access the resources of another process
	- even when that process is running with the same user privileges. 
- Linux thus makes it difficult (though certainly not impossible) for viruses and security exploits 
- to access and attack random resources on a system.
More recent additional security mechanisms that limit risks even further include:
	- Control Groups (cgroups)
		- Allows system administrators to group processes and associate finite resources to each cgroup.
	- Containers
		- Makes it possible to run multiple isolated Linux systems (containers) on a single system by relying on cgroups.
	- Virtualization
		- Hardware is emulated in such a way that not only can processes be isolated, 
		- but entire systems are run simultaneously as isolated and insulated guests (virtual machines) on one physical host.


## Hardware Device Access
- Linux limits user access to non-networking hardware devices in a manner that is extremely similar to regular file access. 
- Applications interact by engaging the filesystem layer
- which is independent of the actual device or hardware the file resides on
- This layer will then open a device special file (often called a device node) under the /dev directory
- Each device special file has standard owner, group and world permission fields.
- Security is naturally enforced just as it is when standard files are accessed.
- Hard disks, for example, are represented as /dev/sd*
- a root user can read and write to the disk in a raw fashion like:
# echo hello world > /dev/sda1
- The standard permissions make it impossible for regular users to do so.
- Writing to a device in this fashion can easily obliterate the filesystem stored on it
- in a way that cannot be repaired without great effort, if at all.
- The normal reading and writing of files on the hard disk by applications is done at a higher level
- through the filesystem and never through direct access to the device node.


## keeping the system updated
- When security problems in either the Linux kernel or applications and libraries are discovered,
- Linux distributions have a good record of reacting quickly and pushing out fixes to all systems.
- The same thing is true with bug fixes and performance improvements that are not security related.
- So the best practice is to take advantage of your Linux distribution's mechanism for automatic updates and never postpone them.


## how passwords are stored
- Originally, encrypted passwords were stored in the /etc/passwd file, which was readable by everyone
- This made it rather easy for passwords to be cracked.
- On modern systems, passwords are actually stored in an encrypted format in a secondary file named /etc/shadow
- Only those with root access can read or modify this file.
- Most Linux distributions rely on a modern password encryption algorithm called SHA-512 (Secure Hashing Algorithm 512 bits), 
- developed by the U.S. National Security Agency (NSA) to encrypt passwords.
- The SHA-512 algorithm is widely used for security applications and protocols. 
- These security applications and protocols include TLS, SSL, PHP, SSH, S/MIME and IPSec
- SHA-512 is one of the most tested hashing algorithms.
$ echo -n test | sha512sum
- use chage to configures the password expiry information for a user.
$ sudo chage --list student 
- PAM(Pluggable Authentication Modules) can be configured to automatically verify that 
- a password created or modified using the passwd utility is sufficiently strong.
- PAM configuration is implemented using a library called pam_cracklib.so
- which can also be replaced by pam_passwdqc.so to take advantage of more options.
- One can also install password cracking programs, such as John The Ripper, to secure the password file and detect weak password entries.


## set password expiry 
$ sudo chage -E 2024-01-01 student
$ chage --list student

